name: Checkmarx DAST Pipeline

on:
  # Manual trigger for this workflow
  workflow_dispatch:

jobs:
  checkmarx-dast:
    permissions:
      contents: read
      security-events: write
      actions: read

    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Create Directory for Output
      - name: Create Directory for Output
        run: mkdir -p ${{ github.workspace }}/output_fold

      # Step 3: Change Directory Owner (Ensure proper permissions for the files)
      - name: Change Directory Owner
        run: sudo chown -R 1000:1000 ${{ github.workspace }}/output_fold

      # Step 4: Checkmarx DAST Scan
      - name: Checkmarx DAST Scan
        uses: Checkmarx/dast-github-action@v2.3.0
        env:
          CX_APIKEY: ${{ secrets.APIKEY }}
        with:
          # The type of scan to perform (web, api)
          command: api
          # Path to the ZAP configuration file (Update this path if needed)
          config: ./Config_q7_dast_api_ee38c1e1-1203-4298-bace-174ffc163f10.yaml
          # Relevant only for API scans. Path to the OpenAPI specification file
          openapi: ./openapi-spec.json  # Use this if you are scanning an API with OpenAPI spec
          # Relevant only for API scans. Path to the Postman collection file (cannot be provided with openapi flag)
          # postman: ./postman_collection.json  # Uncomment this and comment openapi if using Postman collection
          # The base URL for the Checkmarx One Servers (Update if needed)
          base_url: https://eu.ast.checkmarx.net/
          # The environment ID previously created in the Frontend
          environment_id: ee38c1e1-1203-4298-bace-174ffc163f10
          # Directory to store the scan results
          output: ${{ github.workspace }}/output_fold
          # Timeout for ZAP engine in ms (optional)
          timeout: 15000
          # Interval in which to update on the progress of the scan (optional)
          update_interval: 20
          # JVM properties for ZAP engine (optional)
          jvm_properties: -Xmx4G
          # Log level for the logs (optional)
          log_level: debug
          # Set to true to print logs to stdout (optional)
          verbose: true
          # The Severity in which the action should fail (optional)
          fail_on: high
          # Retry attempts on connection failure (optional)
          retry: 5
          # Retry delay in seconds (optional)
          retry_delay: 30
          # Proxy URL for ZAP engine (optional)
          proxy_url: http://proxy.example.com
          # Proxy port (optional)
          proxy_port: 8080
          # Poll timeout for uploading results (optional)
          poll_timeout: 600
          # Time interval between poll requests (optional)
          poll_ticker: 60

      # Step 5: Reclaim Output Directory Ownership
      - name: Reclaim Output Directory
        if: always()
        run: sudo chown -R 1001:1001 ${{ github.workspace }}/output_fold

      # Step 6: Upload DAST Logs as Artifacts
      - name: Upload DAST Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dast-report
          path: ${{ github.workspace }}/output_fold
